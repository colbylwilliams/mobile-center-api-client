// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MobileCenterApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Data.
    /// </summary>
    public static partial class DataExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetSubscriptionById(this IData operations, string subscriptionId, string tableName, string id)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionByIdAsync(subscriptionId, tableName, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionByIdAsync(this IData operations, string subscriptionId, string tableName, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionByIdWithHttpMessagesAsync(subscriptionId, tableName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='permanent'>
            /// </param>
            public static object DeleteSubscriptionById(this IData operations, string subscriptionId, string tableName, string id, bool? permanent = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteSubscriptionByIdAsync(subscriptionId, tableName, id, permanent), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='permanent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSubscriptionByIdAsync(this IData operations, string subscriptionId, string tableName, string id, bool? permanent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubscriptionByIdWithHttpMessagesAsync(subscriptionId, tableName, id, permanent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            public static object GetSubscriptionByTableName(this IData operations, string subscriptionId, string tableName, int? skip = default(int?), int? take = default(int?), string sort = default(string))
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionByTableNameAsync(subscriptionId, tableName, skip, take, sort), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionByTableNameAsync(this IData operations, string subscriptionId, string tableName, int? skip = default(int?), int? take = default(int?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionByTableNameWithHttpMessagesAsync(subscriptionId, tableName, skip, take, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='import'>
            /// </param>
            public static object PostSubscriptionByTableName(this IData operations, string subscriptionId, string tableName, ImportDataContainer import)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostSubscriptionByTableNameAsync(subscriptionId, tableName, import), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='import'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostSubscriptionByTableNameAsync(this IData operations, string subscriptionId, string tableName, ImportDataContainer import, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSubscriptionByTableNameWithHttpMessagesAsync(subscriptionId, tableName, import, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object DeleteSubscriptionByTableName(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteSubscriptionByTableNameAsync(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSubscriptionByTableNameAsync(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubscriptionByTableNameWithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            public static object GetSubscriptionByColumnName(this IData operations, string subscriptionId, string tableName, string columnName)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionByColumnNameAsync(subscriptionId, tableName, columnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionByColumnNameAsync(this IData operations, string subscriptionId, string tableName, string columnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionByColumnNameWithHttpMessagesAsync(subscriptionId, tableName, columnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            public static object PutSubscriptionByColumnName(this IData operations, string subscriptionId, string tableName, string columnName, TableColumn column)
            {
                return Task.Factory.StartNew(s => ((IData)s).PutSubscriptionByColumnNameAsync(subscriptionId, tableName, columnName, column), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutSubscriptionByColumnNameAsync(this IData operations, string subscriptionId, string tableName, string columnName, TableColumn column, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutSubscriptionByColumnNameWithHttpMessagesAsync(subscriptionId, tableName, columnName, column, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            public static object DeleteSubscriptionByColumnName(this IData operations, string subscriptionId, string tableName, string columnName)
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteSubscriptionByColumnNameAsync(subscriptionId, tableName, columnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSubscriptionByColumnNameAsync(this IData operations, string subscriptionId, string tableName, string columnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubscriptionByColumnNameWithHttpMessagesAsync(subscriptionId, tableName, columnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object GetSubscriptionByTableName0(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionByTableName0Async(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionByTableName0Async(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionByTableName0WithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            public static object PostSubscriptionByTableName0(this IData operations, string subscriptionId, string tableName, TableColumn column)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostSubscriptionByTableName0Async(subscriptionId, tableName, column), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostSubscriptionByTableName0Async(this IData operations, string subscriptionId, string tableName, TableColumn column, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSubscriptionByTableName0WithHttpMessagesAsync(subscriptionId, tableName, column, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object GetSubscriptionByTableName00(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionByTableName00Async(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionByTableName00Async(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionByTableName00WithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='table'>
            /// </param>
            public static object PutSubscriptionByTableName(this IData operations, string subscriptionId, string tableName, Table table)
            {
                return Task.Factory.StartNew(s => ((IData)s).PutSubscriptionByTableNameAsync(subscriptionId, tableName, table), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='table'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutSubscriptionByTableNameAsync(this IData operations, string subscriptionId, string tableName, Table table, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutSubscriptionByTableNameWithHttpMessagesAsync(subscriptionId, tableName, table, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object DeleteSubscriptionByTableName0(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteSubscriptionByTableName0Async(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSubscriptionByTableName0Async(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubscriptionByTableName0WithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetSubscriptionBySubscriptionId(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionBySubscriptionIdAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionBySubscriptionIdAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionBySubscriptionIdWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='table'>
            /// </param>
            public static object PostSubscriptionBySubscriptionId(this IData operations, string subscriptionId, Table table)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostSubscriptionBySubscriptionIdAsync(subscriptionId, table), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='table'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostSubscriptionBySubscriptionIdAsync(this IData operations, string subscriptionId, Table table, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSubscriptionBySubscriptionIdWithHttpMessagesAsync(subscriptionId, table, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetSubscriptionBySubscriptionId0(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionBySubscriptionId0Async(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionBySubscriptionId0Async(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionBySubscriptionId0WithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object PostSubscriptionBySubscriptionId0(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostSubscriptionBySubscriptionId0Async(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostSubscriptionBySubscriptionId0Async(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSubscriptionBySubscriptionId0WithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetSubscriptionBySubscriptionId00(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionBySubscriptionId00Async(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionBySubscriptionId00Async(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionBySubscriptionId00WithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetSubscriptionBySubscriptionId000(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionBySubscriptionId000Async(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionBySubscriptionId000Async(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionBySubscriptionId000WithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetSubscriptionBySubscriptionId0000(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetSubscriptionBySubscriptionId0000Async(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionBySubscriptionId0000Async(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionBySubscriptionId0000WithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object PostSubscriptionBySubscriptionId00(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostSubscriptionBySubscriptionId00Async(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostSubscriptionBySubscriptionId00Async(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSubscriptionBySubscriptionId00WithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
