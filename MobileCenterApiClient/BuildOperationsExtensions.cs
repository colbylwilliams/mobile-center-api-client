// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MobileCenterApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for BuildOperations.
    /// </summary>
    public static partial class BuildOperationsExtensions
    {
            /// <summary>
            /// Gets the Xcode versions available to this app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetXcodeByAppName(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetXcodeByAppNameAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Xcode versions available to this app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetXcodeByAppNameAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetXcodeByAppNameWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the repositories available from the source code host
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSourceBySourceHost(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetSourceBySourceHostAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the repositories available from the source code host
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSourceBySourceHostAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSourceBySourceHostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the repository build configuration status of the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRepoByAppName(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetRepoByAppNameAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the repository build configuration status of the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRepoByAppNameAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRepoByAppNameWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Configures the repository for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// The repository information
            /// </param>
            public static object PostRepoByAppName(this IBuildOperations operations, RepoInfo repo)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PostRepoByAppNameAsync(repo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Configures the repository for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// The repository information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRepoByAppNameAsync(this IBuildOperations operations, RepoInfo repo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRepoByAppNameWithHttpMessagesAsync(repo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the configuration for the respository
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DeleteRepoByAppName(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).DeleteRepoByAppNameAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the configuration for the respository
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRepoByAppNameAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRepoByAppNameWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns commit information for a batch of shas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shaCollection'>
            /// A collection of commit SHAs comma-delimited
            /// </param>
            public static IList<Branch> GetShaByShaCollection(this IBuildOperations operations, string shaCollection)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetShaByShaCollectionAsync(shaCollection), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns commit information for a batch of shas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shaCollection'>
            /// A collection of commit SHAs comma-delimited
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Branch>> GetShaByShaCollectionAsync(this IBuildOperations operations, string shaCollection, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShaByShaCollectionWithHttpMessagesAsync(shaCollection, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the build log
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetBuildByBuildId(this IBuildOperations operations)
            {
                Task.Factory.StartNew(s => ((IBuildOperations)s).GetBuildByBuildIdAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the build log
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetBuildByBuildIdAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetBuildByBuildIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the download URI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadType'>
            /// The download type. Possible values include: 'build', 'symbols', 'logs'
            /// </param>
            public static void GetDownloadByDownloadType(this IBuildOperations operations, string downloadType)
            {
                Task.Factory.StartNew(s => ((IBuildOperations)s).GetDownloadByDownloadTypeAsync(downloadType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the download URI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadType'>
            /// The download type. Possible values include: 'build', 'symbols', 'logs'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDownloadByDownloadTypeAsync(this IBuildOperations operations, string downloadType, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetDownloadByDownloadTypeWithHttpMessagesAsync(downloadType, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns the build detail for the given build ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Build GetBuildByBuildId0(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetBuildByBuildId0Async(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the build detail for the given build ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Build> GetBuildByBuildId0Async(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBuildByBuildId0WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the build properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// </param>
            public static Build PatchBuildByBuildId(this IBuildOperations operations, BuildPatch properties)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PatchBuildByBuildIdAsync(properties), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the build properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Build> PatchBuildByBuildIdAsync(this IBuildOperations operations, BuildPatch properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchBuildByBuildIdWithHttpMessagesAsync(properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the projects in the repository for the branch, for all toolsets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='os'>
            /// The desired OS for the project scan; normally the same as the app OS.
            /// Possible values include: 'iOS', 'Android'
            /// </param>
            /// <param name='platform'>
            /// The desired platform for the project scan. Possible values include:
            /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java'
            /// </param>
            public static ToolsetProjects GetToolsetByBranch(this IBuildOperations operations, string os, string platform)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetToolsetByBranchAsync(os, platform), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the projects in the repository for the branch, for all toolsets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='os'>
            /// The desired OS for the project scan; normally the same as the app OS.
            /// Possible values include: 'iOS', 'Android'
            /// </param>
            /// <param name='platform'>
            /// The desired platform for the project scan. Possible values include:
            /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ToolsetProjects> GetToolsetByBranchAsync(this IBuildOperations operations, string os, string platform, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetToolsetByBranchWithHttpMessagesAsync(os, platform, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the branch configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAppByBranch(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppByBranchAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the branch configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppByBranchAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppByBranchWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Configures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, BranchProperties> PostAppByBranch(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PostAppByBranchAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Configures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, BranchProperties>> PostAppByBranchAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppByBranchWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reconfigures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, BranchProperties> PutAppByBranch(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PutAppByBranchAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reconfigures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, BranchProperties>> PutAppByBranchAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutAppByBranchWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the branch build configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SuccessResponse DeleteAppByBranch(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).DeleteAppByBranchAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the branch build configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SuccessResponse> DeleteAppByBranchAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppByBranchWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of builds for the branch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Build> GetAppByBranch0(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppByBranch0Async(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of builds for the branch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Build>> GetAppByBranch0Async(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppByBranch0WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='debug'>
            /// Run build in debug mode
            /// </param>
            public static IList<Build> PostAppByBranch0(this IBuildOperations operations, bool? debug = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PostAppByBranch0Async(debug), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='debug'>
            /// Run build in debug mode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Build>> PostAppByBranch0Async(this IBuildOperations operations, bool? debug = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppByBranch0WithHttpMessagesAsync(debug, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of Git branches for this application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAppByAppName(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppByAppNameAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of Git branches for this application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppByAppNameAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppByAppNameWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
